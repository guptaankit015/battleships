name: "Deploy pptest-ecr-11 - dev3"

on:
  push:
    branches:
      - main
    paths:
      - "**"
      - .github/workflows/argonaut-dev3-pptest-ecr-11.yaml
      - .art/art-sk.yaml
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

env:
  ART_MIDGARD_SERVER: midgard.pp.argonaut.live
  ART_FRONTEGG_SERVER: argonaut-pp.frontegg.com


jobs:
  build:
    
    runs-on: ubuntu-latest
    name: Build and Push Img
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: echo path
        run: echo .art/art-sk.yaml
      - name: Fetch repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Get Short SHA
        id: get_sha
        run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Download art
        run: |
          curl --silent https://github.com/argonautdev/public/releases/latest/download/art-linux -L -o art
          chmod +x ./art
          mv ./art /usr/local/bin/art
      - name: Fetch BuildTime Secrets
        run: |
          art configure --key ${{ secrets.dev_ART_KEY }} --secret ${{ secrets.dev_ART_SECRET }}
          art app envvars get -f .art/art-sk.yaml \
            --type buildtime \
            --format dotenv > art-build-secrets.env
      - name: build-docker
        run: |
          wget https://github.com/buildpacks/pack/releases/download/v0.22.0/pack-v0.22.0-linux.tgz -O pack.tgz
          tar xvf pack.tgz
          rm pack.tgz
          ./pack build 170982004044.dkr.ecr.us-east-2.amazonaws.com/argonaut/pptest-ecr-11:${{ steps.get_sha.outputs.SHA_SHORT }} \
            --path . \
            --builder heroku/buildpacks: \
            --env-file art-build-secrets.env
          docker save 170982004044.dkr.ecr.us-east-2.amazonaws.com/argonaut/pptest-ecr-11:${{ steps.get_sha.outputs.SHA_SHORT }} > image.tar

      - name: Set AWS Credentials via art
        run: |
          art configure generate-aws-credentials >> credentials.json
          echo "AWS_ACCESS_KEY_ID=$(cat credentials.json | jq --raw-output '.accessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(cat credentials.json | jq --raw-output '.secretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(cat credentials.json | jq --raw-output '.sessionToken')" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$(cat credentials.json | jq --raw-output '.accountId')" >> $GITHUB_ENV
          echo "AWS_REGION=$(cat credentials.json | jq --raw-output '.region')" >> $GITHUB_ENV
      
      - name: Push to ecr
        uses: argonautdev/aws-ecr-action@v4.1.1
        id: push_to_ecr
        with:
          access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          repo: argonaut/pptest-ecr-11
          region: us-east-2
          tags: ${{ steps.get_sha.outputs.SHA_SHORT }}
          create_repo: true
          image_scanning_configuration: true
          docker_image_path: image.tar

  deploy:
    
    runs-on: ubuntu-latest
    name: Deploy to Argonaut
    needs: build
    steps:
      - name: Fetch repo
        uses: actions/checkout@v2
      - name: Fetch branch name
        shell: bash
        run: echo ::set-output name=BRANCH_NAME::${GITHUB_REF#refs/heads/}
        id: get_branch_name
      - name: Get Short SHA
        id: get_sha
        run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - name: Download art
        run: |
          curl --silent https://github.com/argonautdev/public/releases/latest/download/art-linux -L -o art
          chmod +x ./art
          mv ./art /usr/local/bin/art
      - name: Configure art
        run: |
          art configure --key ${{ secrets.dev_ART_KEY }} --secret ${{ secrets.dev_ART_SECRET }}
          art app deploy -f .art/art-sk.yaml \
            --set imageTag="${{ steps.get_sha.outputs.SHA_SHORT }}" 
